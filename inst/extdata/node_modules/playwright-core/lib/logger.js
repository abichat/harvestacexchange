"use strict";
/**
 * Copyright Microsoft Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const debug = require("debug");
exports.errorLog = { name: 'generic', severity: 'error' };
function logError(logger) {
    return error => logger._log(exports.errorLog, error, []);
}
exports.logError = logError;
class RootLogger {
    constructor(userSink) {
        this._userSink = userSink;
        this._debugSink = new DebugLoggerSink();
    }
    _isLogEnabled(log) {
        return (this._userSink && this._userSink.isEnabled(log.name, log.severity || 'info')) ||
            this._debugSink.isEnabled(log.name, log.severity || 'info');
    }
    _log(log, message, ...args) {
        if (this._userSink && this._userSink.isEnabled(log.name, log.severity || 'info'))
            this._userSink.log(log.name, log.severity || 'info', message, args, log.color ? { color: log.color } : {});
        if (this._debugSink.isEnabled(log.name, log.severity || 'info'))
            this._debugSink.log(log.name, log.severity || 'info', message, args, log.color ? { color: log.color } : {});
    }
}
exports.RootLogger = RootLogger;
const colorMap = new Map([
    ['red', 160],
    ['green', 34],
    ['yellow', 172],
    ['blue', 33],
    ['magenta', 207],
    ['cyan', 45],
    ['reset', 0],
]);
class DebugLoggerSink {
    constructor() {
        this._debuggers = new Map();
    }
    isEnabled(name, severity) {
        return debug.enabled(`pw:${name}`);
    }
    log(name, severity, message, args, hints) {
        let cachedDebugger = this._debuggers.get(name);
        if (!cachedDebugger) {
            cachedDebugger = debug(`pw:${name}`);
            this._debuggers.set(name, cachedDebugger);
            let color = hints.color || 'reset';
            switch (severity) {
                case 'error':
                    color = 'red';
                    break;
                case 'warning':
                    color = 'yellow';
                    break;
            }
            const escaped = colorMap.get(color) || 0;
            if (escaped)
                cachedDebugger.color = String(escaped);
        }
        cachedDebugger(message, ...args);
    }
}
//# sourceMappingURL=logger.js.map