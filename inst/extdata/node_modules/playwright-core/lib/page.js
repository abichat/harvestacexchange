"use strict";
/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const frames = require("./frames");
const helper_1 = require("./helper");
const input = require("./input");
const js = require("./javascript");
const network = require("./network");
const screenshotter_1 = require("./screenshotter");
const timeoutSettings_1 = require("./timeoutSettings");
const types = require("./types");
const events_1 = require("./events");
const console_1 = require("./console");
const accessibility = require("./accessibility");
const extendedEventEmitter_1 = require("./extendedEventEmitter");
const events_2 = require("events");
const fileChooser_1 = require("./fileChooser");
const logger_1 = require("./logger");
class Page extends extendedEventEmitter_1.ExtendedEventEmitter {
    constructor(delegate, browserContext) {
        super();
        this._closed = false;
        this._disconnected = false;
        this._pageBindings = new Map();
        this._workers = new Map();
        this._routes = [];
        this._delegate = delegate;
        this._closedCallback = () => { };
        this._closedPromise = new Promise(f => this._closedCallback = f);
        this._disconnectedCallback = () => { };
        this._disconnectedPromise = new Promise(f => this._disconnectedCallback = f);
        this._browserContext = browserContext;
        let viewportSize = null;
        if (browserContext._options.viewport) {
            viewportSize = {
                width: browserContext._options.viewport.width,
                height: browserContext._options.viewport.height,
            };
        }
        this._state = {
            viewportSize,
            mediaType: null,
            colorScheme: null,
            extraHTTPHeaders: null,
        };
        this.accessibility = new accessibility.Accessibility(delegate.getAccessibilityTree.bind(delegate));
        this.keyboard = new input.Keyboard(delegate.rawKeyboard);
        this.mouse = new input.Mouse(delegate.rawMouse, this.keyboard);
        this._timeoutSettings = new timeoutSettings_1.TimeoutSettings(browserContext._timeoutSettings);
        this._screenshotter = new screenshotter_1.Screenshotter(this);
        this._frameManager = new frames.FrameManager(this);
        if (delegate.pdf)
            this.pdf = delegate.pdf.bind(delegate);
        this.coverage = delegate.coverage ? delegate.coverage() : null;
    }
    _abortPromiseForEvent(event) {
        return this._disconnectedPromise;
    }
    _computeDeadline(options) {
        return this._timeoutSettings.computeDeadline(options);
    }
    _didClose() {
        helper_1.assert(!this._closed, 'Page closed twice');
        this._closed = true;
        this.emit(events_1.Events.Page.Close);
        this._closedCallback();
    }
    _didCrash() {
        this.emit(events_1.Events.Page.Crash);
    }
    _didDisconnect() {
        helper_1.assert(!this._disconnected, 'Page disconnected twice');
        this._disconnected = true;
        this._disconnectedCallback(new Error('Target closed'));
    }
    async _onFileChooserOpened(handle) {
        const multiple = await handle.evaluate(element => !!element.multiple);
        if (!this.listenerCount(events_1.Events.Page.FileChooser)) {
            handle.dispose();
            return;
        }
        const fileChooser = new fileChooser_1.FileChooser(this, handle, multiple);
        this.emit(events_1.Events.Page.FileChooser, fileChooser);
    }
    context() {
        return this._browserContext;
    }
    async opener() {
        return await this._delegate.opener();
    }
    mainFrame() {
        return this._frameManager.mainFrame();
    }
    frame(options) {
        const name = helper_1.helper.isString(options) ? options : options.name;
        const url = helper_1.helper.isObject(options) ? options.url : undefined;
        helper_1.assert(name || url, 'Either name or url matcher should be specified');
        return this.frames().find(f => {
            if (name)
                return f.name() === name;
            return helper_1.helper.urlMatches(f.url(), url);
        }) || null;
    }
    frames() {
        return this._frameManager.frames();
    }
    setDefaultNavigationTimeout(timeout) {
        this._timeoutSettings.setDefaultNavigationTimeout(timeout);
    }
    setDefaultTimeout(timeout) {
        this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async $(selector) {
        return this.mainFrame().$(selector);
    }
    async waitForSelector(selector, options) {
        return this.mainFrame().waitForSelector(selector, options);
    }
    async dispatchEvent(selector, type, eventInit, options) {
        return this.mainFrame().dispatchEvent(selector, type, eventInit, options);
    }
    async evaluateHandle(pageFunction, arg) {
        helper_1.assertMaxArguments(arguments.length, 2);
        return this.mainFrame().evaluateHandle(pageFunction, arg);
    }
    async $eval(selector, pageFunction, arg) {
        helper_1.assertMaxArguments(arguments.length, 3);
        return this.mainFrame().$eval(selector, pageFunction, arg);
    }
    async $$eval(selector, pageFunction, arg) {
        helper_1.assertMaxArguments(arguments.length, 3);
        return this.mainFrame().$$eval(selector, pageFunction, arg);
    }
    async $$(selector) {
        return this.mainFrame().$$(selector);
    }
    async addScriptTag(options) {
        return this.mainFrame().addScriptTag(options);
    }
    async addStyleTag(options) {
        return this.mainFrame().addStyleTag(options);
    }
    async exposeFunction(name, playwrightFunction) {
        if (this._pageBindings.has(name))
            throw new Error(`Function "${name}" has been already registered`);
        if (this._browserContext._pageBindings.has(name))
            throw new Error(`Function "${name}" has been already registered in the browser context`);
        const binding = new PageBinding(name, playwrightFunction);
        this._pageBindings.set(name, binding);
        await this._delegate.exposeBinding(binding);
    }
    setExtraHTTPHeaders(headers) {
        this._state.extraHTTPHeaders = network.verifyHeaders(headers);
        return this._delegate.updateExtraHTTPHeaders();
    }
    async _onBindingCalled(payload, context) {
        await PageBinding.dispatch(this, payload, context);
    }
    _addConsoleMessage(type, args, location, text) {
        const message = new console_1.ConsoleMessage(type, text, args, location);
        const intercepted = this._frameManager.interceptConsoleMessage(message);
        if (intercepted || !this.listenerCount(events_1.Events.Page.Console))
            args.forEach(arg => arg.dispose());
        else
            this.emit(events_1.Events.Page.Console, message);
    }
    url() {
        return this.mainFrame().url();
    }
    async content() {
        return this.mainFrame().content();
    }
    async setContent(html, options) {
        return this.mainFrame().setContent(html, options);
    }
    async goto(url, options) {
        return this.mainFrame().goto(url, options);
    }
    async reload(options) {
        const waitPromise = this.waitForNavigation(options);
        await this._delegate.reload();
        return waitPromise;
    }
    async waitForLoadState(state, options) {
        return this.mainFrame().waitForLoadState(state, options);
    }
    async waitForNavigation(options) {
        return this.mainFrame().waitForNavigation(options);
    }
    async waitForRequest(urlOrPredicate, options = {}) {
        const deadline = this._timeoutSettings.computeDeadline(options);
        return helper_1.helper.waitForEvent(this, events_1.Events.Page.Request, (request) => {
            if (helper_1.helper.isString(urlOrPredicate) || helper_1.helper.isRegExp(urlOrPredicate))
                return helper_1.helper.urlMatches(request.url(), urlOrPredicate);
            return urlOrPredicate(request);
        }, deadline, this._disconnectedPromise);
    }
    async waitForResponse(urlOrPredicate, options = {}) {
        const deadline = this._timeoutSettings.computeDeadline(options);
        return helper_1.helper.waitForEvent(this, events_1.Events.Page.Response, (response) => {
            if (helper_1.helper.isString(urlOrPredicate) || helper_1.helper.isRegExp(urlOrPredicate))
                return helper_1.helper.urlMatches(response.url(), urlOrPredicate);
            return urlOrPredicate(response);
        }, deadline, this._disconnectedPromise);
    }
    async goBack(options) {
        const waitPromise = this.waitForNavigation(options);
        const result = await this._delegate.goBack();
        if (!result) {
            waitPromise.catch(() => { });
            return null;
        }
        return waitPromise;
    }
    async goForward(options) {
        const waitPromise = this.waitForNavigation(options);
        const result = await this._delegate.goForward();
        if (!result) {
            waitPromise.catch(() => { });
            return null;
        }
        return waitPromise;
    }
    async emulateMedia(options) {
        helper_1.assert(!options.media || types.mediaTypes.has(options.media), 'Unsupported media: ' + options.media);
        helper_1.assert(!options.colorScheme || types.colorSchemes.has(options.colorScheme), 'Unsupported color scheme: ' + options.colorScheme);
        if (options.media !== undefined)
            this._state.mediaType = options.media;
        if (options.colorScheme !== undefined)
            this._state.colorScheme = options.colorScheme;
        await this._delegate.updateEmulateMedia();
    }
    async setViewportSize(viewportSize) {
        this._state.viewportSize = { ...viewportSize };
        await this._delegate.setViewportSize(this._state.viewportSize);
    }
    viewportSize() {
        return this._state.viewportSize;
    }
    async evaluate(pageFunction, arg) {
        helper_1.assertMaxArguments(arguments.length, 2);
        return this.mainFrame().evaluate(pageFunction, arg);
    }
    async addInitScript(script, arg) {
        await this._delegate.evaluateOnNewDocument(await helper_1.helper.evaluationScript(script, arg));
    }
    _needsRequestInterception() {
        return this._routes.length > 0 || this._browserContext._routes.length > 0;
    }
    async route(url, handler) {
        this._routes.push({ url, handler });
        await this._delegate.updateRequestInterception();
    }
    async unroute(url, handler) {
        this._routes = this._routes.filter(route => route.url !== url || (handler && route.handler !== handler));
        await this._delegate.updateRequestInterception();
    }
    _requestStarted(request) {
        this.emit(events_1.Events.Page.Request, request);
        const route = request._route();
        if (!route)
            return;
        for (const { url, handler } of this._routes) {
            if (helper_1.helper.urlMatches(request.url(), url)) {
                handler(route, request);
                return;
            }
        }
        for (const { url, handler } of this._browserContext._routes) {
            if (helper_1.helper.urlMatches(request.url(), url)) {
                handler(route, request);
                return;
            }
        }
        route.continue();
    }
    async screenshot(options) {
        return this._screenshotter.screenshotPage(options);
    }
    async title() {
        return this.mainFrame().title();
    }
    async close(options = { runBeforeUnload: undefined }) {
        if (this._closed)
            return;
        helper_1.assert(!this._disconnected, 'Protocol error: Connection closed. Most likely the page has been closed.');
        const runBeforeUnload = !!options.runBeforeUnload;
        await this._delegate.closePage(runBeforeUnload);
        if (!runBeforeUnload)
            await this._closedPromise;
        if (this._ownedContext)
            await this._ownedContext.close();
    }
    isClosed() {
        return this._closed;
    }
    async click(selector, options) {
        return this.mainFrame().click(selector, options);
    }
    async dblclick(selector, options) {
        return this.mainFrame().dblclick(selector, options);
    }
    async fill(selector, value, options) {
        return this.mainFrame().fill(selector, value, options);
    }
    async focus(selector, options) {
        return this.mainFrame().focus(selector, options);
    }
    async hover(selector, options) {
        return this.mainFrame().hover(selector, options);
    }
    async selectOption(selector, values, options) {
        return this.mainFrame().selectOption(selector, values, options);
    }
    async setInputFiles(selector, files, options) {
        return this.mainFrame().setInputFiles(selector, files, options);
    }
    async type(selector, text, options) {
        return this.mainFrame().type(selector, text, options);
    }
    async press(selector, key, options) {
        return this.mainFrame().press(selector, key, options);
    }
    async check(selector, options) {
        return this.mainFrame().check(selector, options);
    }
    async uncheck(selector, options) {
        return this.mainFrame().uncheck(selector, options);
    }
    async waitForTimeout(timeout) {
        await this.mainFrame().waitForTimeout(timeout);
    }
    async waitForFunction(pageFunction, arg, options) {
        return this.mainFrame().waitForFunction(pageFunction, arg, options);
    }
    workers() {
        return [...this._workers.values()];
    }
    _addWorker(workerId, worker) {
        this._workers.set(workerId, worker);
        this.emit(events_1.Events.Page.Worker, worker);
    }
    _removeWorker(workerId) {
        const worker = this._workers.get(workerId);
        if (!worker)
            return;
        worker.emit(events_1.Events.Worker.Close, worker);
        this._workers.delete(workerId);
    }
    _clearWorkers() {
        for (const [workerId, worker] of this._workers) {
            worker.emit(events_1.Events.Worker.Close, worker);
            this._workers.delete(workerId);
        }
    }
    on(event, listener) {
        if (event === events_1.Events.Page.FileChooser) {
            if (!this.listenerCount(event))
                this._delegate.setFileChooserIntercepted(true);
        }
        super.on(event, listener);
        return this;
    }
    removeListener(event, listener) {
        super.removeListener(event, listener);
        if (event === events_1.Events.Page.FileChooser && !this.listenerCount(event))
            this._delegate.setFileChooserIntercepted(false);
        return this;
    }
    _isLogEnabled(log) {
        return this._browserContext._isLogEnabled(log);
    }
    _log(log, message, ...args) {
        return this._browserContext._log(log, message, ...args);
    }
}
exports.Page = Page;
class Worker extends events_2.EventEmitter {
    constructor(logger, url) {
        super();
        this._existingExecutionContext = null;
        this._logger = logger;
        this._url = url;
        this._executionContextCallback = () => { };
        this._executionContextPromise = new Promise(x => this._executionContextCallback = x);
    }
    _createExecutionContext(delegate) {
        this._existingExecutionContext = new js.ExecutionContext(delegate, this._logger);
        this._executionContextCallback(this._existingExecutionContext);
    }
    url() {
        return this._url;
    }
    async evaluate(pageFunction, arg) {
        helper_1.assertMaxArguments(arguments.length, 2);
        return (await this._executionContextPromise).evaluateInternal(pageFunction, arg);
    }
    async evaluateHandle(pageFunction, arg) {
        helper_1.assertMaxArguments(arguments.length, 2);
        return (await this._executionContextPromise).evaluateHandleInternal(pageFunction, arg);
    }
}
exports.Worker = Worker;
class PageBinding {
    constructor(name, playwrightFunction) {
        this.name = name;
        this.playwrightFunction = playwrightFunction;
        this.source = helper_1.helper.evaluationString(addPageBinding, name);
    }
    static async dispatch(page, payload, context) {
        const { name, seq, args } = JSON.parse(payload);
        let expression = null;
        try {
            let binding = page._pageBindings.get(name);
            if (!binding)
                binding = page._browserContext._pageBindings.get(name);
            const result = await binding.playwrightFunction(...args);
            expression = helper_1.helper.evaluationString(deliverResult, name, seq, result);
        }
        catch (error) {
            if (error instanceof Error)
                expression = helper_1.helper.evaluationString(deliverError, name, seq, error.message, error.stack);
            else
                expression = helper_1.helper.evaluationString(deliverErrorValue, name, seq, error);
        }
        context.evaluateInternal(expression).catch(logger_1.logError(page));
        function deliverResult(name, seq, result) {
            window[name]['callbacks'].get(seq).resolve(result);
            window[name]['callbacks'].delete(seq);
        }
        function deliverError(name, seq, message, stack) {
            const error = new Error(message);
            error.stack = stack;
            window[name]['callbacks'].get(seq).reject(error);
            window[name]['callbacks'].delete(seq);
        }
        function deliverErrorValue(name, seq, value) {
            window[name]['callbacks'].get(seq).reject(value);
            window[name]['callbacks'].delete(seq);
        }
    }
}
exports.PageBinding = PageBinding;
function addPageBinding(bindingName) {
    const binding = window[bindingName];
    if (binding.__installed)
        return;
    window[bindingName] = (...args) => {
        const me = window[bindingName];
        let callbacks = me['callbacks'];
        if (!callbacks) {
            callbacks = new Map();
            me['callbacks'] = callbacks;
        }
        const seq = (me['lastSeq'] || 0) + 1;
        me['lastSeq'] = seq;
        const promise = new Promise((resolve, reject) => callbacks.set(seq, { resolve, reject }));
        binding(JSON.stringify({ name: bindingName, seq, args }));
        return promise;
    };
    window[bindingName].__installed = true;
}
//# sourceMappingURL=page.js.map