"use strict";
/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const wkBrowser_1 = require("../webkit/wkBrowser");
const pipeTransport_1 = require("./pipeTransport");
const processLauncher_1 = require("./processLauncher");
const fs = require("fs");
const path = require("path");
const os = require("os");
const util = require("util");
const helper_1 = require("../helper");
const wkConnection_1 = require("../webkit/wkConnection");
const browserType_1 = require("./browserType");
const transport_1 = require("../transport");
const ws = require("ws");
const browserServer_1 = require("./browserServer");
const events_1 = require("../events");
const logger_1 = require("../logger");
class WebKit extends browserType_1.AbstractBrowserType {
    constructor(packagePath, browser) {
        super(packagePath, browser);
    }
    async launch(options = {}) {
        helper_1.assert(!options.userDataDir, 'userDataDir option is not supported in `browserType.launch`. Use `browserType.launchPersistentContext` instead');
        const { browserServer, transport, downloadsPath, logger } = await this._launchServer(options, 'local');
        const browser = await wkBrowser_1.WKBrowser.connect(transport, logger, options.slowMo, false);
        browser._ownedServer = browserServer;
        browser._downloadsPath = downloadsPath;
        return browser;
    }
    async launchServer(options = {}) {
        return (await this._launchServer(options, 'server')).browserServer;
    }
    async launchPersistentContext(userDataDir, options = {}) {
        const { timeout = 30000, slowMo = 0, } = options;
        const { transport, browserServer, logger } = await this._launchServer(options, 'persistent', userDataDir);
        const browser = await wkBrowser_1.WKBrowser.connect(transport, logger, slowMo, true);
        browser._ownedServer = browserServer;
        await helper_1.helper.waitWithTimeout(browser._waitForFirstPageTarget(), 'first page', timeout);
        return browser._defaultContext;
    }
    async _launchServer(options, launchType, userDataDir) {
        const { ignoreDefaultArgs = false, args = [], executablePath = null, env = process.env, handleSIGINT = true, handleSIGTERM = true, handleSIGHUP = true, port = 0, } = options;
        helper_1.assert(!port || launchType === 'server', 'Cannot specify a port without launching as a server.');
        const logger = new logger_1.RootLogger(options.logger);
        let temporaryUserDataDir = null;
        if (!userDataDir) {
            userDataDir = await mkdtempAsync(WEBKIT_PROFILE_PATH);
            temporaryUserDataDir = userDataDir;
        }
        const webkitArguments = [];
        if (!ignoreDefaultArgs)
            webkitArguments.push(...this._defaultArgs(options, launchType, userDataDir, port));
        else if (Array.isArray(ignoreDefaultArgs))
            webkitArguments.push(...this._defaultArgs(options, launchType, userDataDir, port).filter(arg => ignoreDefaultArgs.indexOf(arg) === -1));
        else
            webkitArguments.push(...args);
        const webkitExecutable = executablePath || this.executablePath();
        if (!webkitExecutable)
            throw new Error(`No executable path is specified.`);
        const { launchedProcess, gracefullyClose, downloadsPath } = await processLauncher_1.launchProcess({
            executablePath: webkitExecutable,
            args: webkitArguments,
            env: { ...env, CURL_COOKIE_JAR_PATH: path.join(userDataDir, 'cookiejar.db') },
            handleSIGINT,
            handleSIGTERM,
            handleSIGHUP,
            logger,
            pipe: true,
            tempDir: temporaryUserDataDir || undefined,
            attemptToGracefullyClose: async () => {
                helper_1.assert(transport);
                // We try to gracefully close to prevent crash reporting and core dumps.
                // Note that it's fine to reuse the pipe transport, since
                // our connection ignores kBrowserCloseMessageId.
                await transport.send({ method: 'Playwright.close', params: {}, id: wkConnection_1.kBrowserCloseMessageId });
            },
            onkill: (exitCode, signal) => {
                if (browserServer)
                    browserServer.emit(events_1.Events.BrowserServer.Close, exitCode, signal);
            },
        });
        // For local launch scenario close will terminate the browser process.
        let transport = undefined;
        let browserServer = undefined;
        const stdio = launchedProcess.stdio;
        transport = new pipeTransport_1.PipeTransport(stdio[3], stdio[4], logger);
        browserServer = new browserServer_1.BrowserServer(launchedProcess, gracefullyClose, launchType === 'server' ? wrapTransportWithWebSocket(transport, logger, port || 0) : null);
        return { browserServer, transport, downloadsPath, logger };
    }
    async connect(options) {
        return await transport_1.WebSocketTransport.connect(options.wsEndpoint, transport => {
            return wkBrowser_1.WKBrowser.connect(transport, new logger_1.RootLogger(options.logger), options.slowMo);
        });
    }
    _defaultArgs(options = {}, launchType, userDataDir, port) {
        const { devtools = false, headless = !devtools, args = [], } = options;
        if (devtools)
            console.warn('devtools parameter as a launch argument in WebKit is not supported. Also starting Web Inspector manually will terminate the execution in WebKit.');
        const userDataDirArg = args.find(arg => arg.startsWith('--user-data-dir='));
        if (userDataDirArg)
            throw new Error('Pass userDataDir parameter instead of specifying --user-data-dir argument');
        if (launchType !== 'persistent' && args.find(arg => !arg.startsWith('-')))
            throw new Error('Arguments can not specify page to be opened');
        const webkitArguments = ['--inspector-pipe'];
        if (headless)
            webkitArguments.push('--headless');
        if (launchType === 'persistent')
            webkitArguments.push(`--user-data-dir=${userDataDir}`);
        else
            webkitArguments.push(`--no-startup-window`);
        webkitArguments.push(...args);
        return webkitArguments;
    }
}
exports.WebKit = WebKit;
const mkdtempAsync = util.promisify(fs.mkdtemp);
const WEBKIT_PROFILE_PATH = path.join(os.tmpdir(), 'playwright_dev_profile-');
function wrapTransportWithWebSocket(transport, logger, port) {
    const server = new ws.Server({ port });
    const guid = helper_1.helper.guid();
    const idMixer = new transport_1.SequenceNumberMixer();
    const pendingBrowserContextCreations = new Set();
    const pendingBrowserContextDeletions = new Map();
    const browserContextIds = new Map();
    const pageProxyIds = new Map();
    const sockets = new Set();
    transport.onmessage = message => {
        if (typeof message.id === 'number') {
            if (message.id === -9999)
                return;
            // Process command response.
            const value = idMixer.take(message.id);
            if (!value)
                return;
            const { id, socket } = value;
            if (socket.readyState === ws.CLOSING) {
                if (pendingBrowserContextCreations.has(id)) {
                    transport.send({
                        id: ++transport_1.SequenceNumberMixer._lastSequenceNumber,
                        method: 'Playwright.deleteContext',
                        params: { browserContextId: message.result.browserContextId }
                    });
                }
                return;
            }
            if (pendingBrowserContextCreations.has(message.id)) {
                // Browser.createContext response -> establish context attribution.
                browserContextIds.set(message.result.browserContextId, socket);
                pendingBrowserContextCreations.delete(message.id);
            }
            const deletedContextId = pendingBrowserContextDeletions.get(message.id);
            if (deletedContextId) {
                // Browser.deleteContext response -> remove context attribution.
                browserContextIds.delete(deletedContextId);
                pendingBrowserContextDeletions.delete(message.id);
            }
            message.id = id;
            socket.send(JSON.stringify(message));
            return;
        }
        // Process notification response.
        const { method, params, pageProxyId } = message;
        if (pageProxyId) {
            const socket = pageProxyIds.get(pageProxyId);
            if (!socket || socket.readyState === ws.CLOSING) {
                // Drop unattributed messages on the floor.
                return;
            }
            socket.send(JSON.stringify(message));
            return;
        }
        if (method === 'Playwright.pageProxyCreated') {
            const socket = browserContextIds.get(params.pageProxyInfo.browserContextId);
            if (!socket || socket.readyState === ws.CLOSING) {
                // Drop unattributed messages on the floor.
                return;
            }
            pageProxyIds.set(params.pageProxyInfo.pageProxyId, socket);
            socket.send(JSON.stringify(message));
            return;
        }
        if (method === 'Playwright.pageProxyDestroyed') {
            const socket = pageProxyIds.get(params.pageProxyId);
            pageProxyIds.delete(params.pageProxyId);
            if (socket && socket.readyState !== ws.CLOSING)
                socket.send(JSON.stringify(message));
            return;
        }
        if (method === 'Playwright.provisionalLoadFailed') {
            const socket = pageProxyIds.get(params.pageProxyId);
            if (socket && socket.readyState !== ws.CLOSING)
                socket.send(JSON.stringify(message));
            return;
        }
    };
    transport.onclose = () => {
        for (const socket of sockets) {
            socket.removeListener('close', socket.__closeListener);
            socket.close(undefined, 'Browser disconnected');
        }
        server.close();
        transport.onmessage = undefined;
        transport.onclose = undefined;
    };
    server.on('connection', (socket, req) => {
        if (req.url !== '/' + guid) {
            socket.close();
            return;
        }
        sockets.add(socket);
        socket.on('message', (message) => {
            const parsedMessage = JSON.parse(Buffer.from(message).toString());
            const { id, method, params } = parsedMessage;
            const seqNum = idMixer.generate({ id, socket });
            transport.send({ ...parsedMessage, id: seqNum });
            if (method === 'Playwright.createContext')
                pendingBrowserContextCreations.add(seqNum);
            if (method === 'Playwright.deleteContext')
                pendingBrowserContextDeletions.set(seqNum, params.browserContextId);
        });
        socket.on('error', logger_1.logError(logger));
        socket.on('close', socket.__closeListener = () => {
            for (const [pageProxyId, s] of pageProxyIds) {
                if (s === socket)
                    pageProxyIds.delete(pageProxyId);
            }
            for (const [browserContextId, s] of browserContextIds) {
                if (s === socket) {
                    transport.send({
                        id: ++transport_1.SequenceNumberMixer._lastSequenceNumber,
                        method: 'Playwright.deleteContext',
                        params: { browserContextId }
                    });
                    browserContextIds.delete(browserContextId);
                }
            }
            sockets.delete(socket);
        });
    });
    const address = server.address();
    const wsEndpoint = typeof address === 'string' ? `${address}/${guid}` : `ws://127.0.0.1:${address.port}/${guid}`;
    return new browserServer_1.WebSocketWrapper(wsEndpoint, [pendingBrowserContextCreations, pendingBrowserContextDeletions, browserContextIds, pageProxyIds, sockets]);
}
//# sourceMappingURL=webkit.js.map