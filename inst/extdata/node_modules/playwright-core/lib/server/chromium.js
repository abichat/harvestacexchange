"use strict";
/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const os = require("os");
const path = require("path");
const util = require("util");
const helper_1 = require("../helper");
const crBrowser_1 = require("../chromium/crBrowser");
const ws = require("ws");
const processLauncher_1 = require("./processLauncher");
const crConnection_1 = require("../chromium/crConnection");
const pipeTransport_1 = require("./pipeTransport");
const browserType_1 = require("./browserType");
const browserServer_1 = require("./browserServer");
const events_1 = require("../events");
const transport_1 = require("../transport");
const logger_1 = require("../logger");
class Chromium extends browserType_1.AbstractBrowserType {
    constructor(packagePath, browser) {
        super(packagePath, browser);
    }
    async launch(options = {}) {
        helper_1.assert(!options.userDataDir, 'userDataDir option is not supported in `browserType.launch`. Use `browserType.launchPersistentContext` instead');
        const { browserServer, transport, downloadsPath, logger } = await this._launchServer(options, 'local');
        const browser = await crBrowser_1.CRBrowser.connect(transport, false, logger, options);
        browser._ownedServer = browserServer;
        browser._downloadsPath = downloadsPath;
        return browser;
    }
    async launchServer(options = {}) {
        return (await this._launchServer(options, 'server')).browserServer;
    }
    async launchPersistentContext(userDataDir, options = {}) {
        const { transport, browserServer, logger } = await this._launchServer(options, 'persistent', userDataDir);
        const browser = await crBrowser_1.CRBrowser.connect(transport, true, logger, options);
        browser._ownedServer = browserServer;
        await helper_1.helper.waitWithTimeout(browser._firstPagePromise, 'first page', options.timeout || 30000);
        return browser._defaultContext;
    }
    async _launchServer(options, launchType, userDataDir) {
        const { ignoreDefaultArgs = false, args = [], executablePath = null, env = process.env, handleSIGINT = true, handleSIGTERM = true, handleSIGHUP = true, port = 0, } = options;
        helper_1.assert(!port || launchType === 'server', 'Cannot specify a port without launching as a server.');
        const logger = new logger_1.RootLogger(options.logger);
        let temporaryUserDataDir = null;
        if (!userDataDir) {
            userDataDir = await mkdtempAsync(CHROMIUM_PROFILE_PATH);
            temporaryUserDataDir = userDataDir;
        }
        const chromeArguments = [];
        if (!ignoreDefaultArgs)
            chromeArguments.push(...this._defaultArgs(options, launchType, userDataDir));
        else if (Array.isArray(ignoreDefaultArgs))
            chromeArguments.push(...this._defaultArgs(options, launchType, userDataDir).filter(arg => ignoreDefaultArgs.indexOf(arg) === -1));
        else
            chromeArguments.push(...args);
        const chromeExecutable = executablePath || this.executablePath();
        if (!chromeExecutable)
            throw new Error(`No executable path is specified. Pass "executablePath" option directly.`);
        const { launchedProcess, gracefullyClose, downloadsPath } = await processLauncher_1.launchProcess({
            executablePath: chromeExecutable,
            args: chromeArguments,
            env,
            handleSIGINT,
            handleSIGTERM,
            handleSIGHUP,
            logger,
            pipe: true,
            tempDir: temporaryUserDataDir || undefined,
            attemptToGracefullyClose: async () => {
                helper_1.assert(browserServer);
                // We try to gracefully close to prevent crash reporting and core dumps.
                // Note that it's fine to reuse the pipe transport, since
                // our connection ignores kBrowserCloseMessageId.
                const t = transport;
                const message = { method: 'Browser.close', id: crConnection_1.kBrowserCloseMessageId, params: {} };
                t.send(message);
            },
            onkill: (exitCode, signal) => {
                if (browserServer)
                    browserServer.emit(events_1.Events.BrowserServer.Close, exitCode, signal);
            },
        });
        let transport = undefined;
        let browserServer = undefined;
        const stdio = launchedProcess.stdio;
        transport = new pipeTransport_1.PipeTransport(stdio[3], stdio[4], logger);
        browserServer = new browserServer_1.BrowserServer(launchedProcess, gracefullyClose, launchType === 'server' ? wrapTransportWithWebSocket(transport, logger, port) : null);
        return { browserServer, transport, downloadsPath, logger };
    }
    async connect(options) {
        return await transport_1.WebSocketTransport.connect(options.wsEndpoint, transport => {
            return crBrowser_1.CRBrowser.connect(transport, false, new logger_1.RootLogger(options.logger), options);
        });
    }
    _defaultArgs(options = {}, launchType, userDataDir) {
        const { devtools = false, headless = !devtools, args = [], } = options;
        const userDataDirArg = args.find(arg => arg.startsWith('--user-data-dir'));
        if (userDataDirArg)
            throw new Error('Pass userDataDir parameter instead of specifying --user-data-dir argument');
        if (args.find(arg => arg.startsWith('--remote-debugging-pipe')))
            throw new Error('Playwright manages remote debugging connection itself.');
        if (launchType !== 'persistent' && args.find(arg => !arg.startsWith('-')))
            throw new Error('Arguments can not specify page to be opened');
        const chromeArguments = [...DEFAULT_ARGS];
        chromeArguments.push(`--user-data-dir=${userDataDir}`);
        chromeArguments.push('--remote-debugging-pipe');
        if (devtools)
            chromeArguments.push('--auto-open-devtools-for-tabs');
        if (headless) {
            chromeArguments.push('--headless', '--hide-scrollbars', '--mute-audio');
        }
        chromeArguments.push(...args);
        if (launchType === 'persistent') {
            if (args.every(arg => arg.startsWith('-')))
                chromeArguments.push('about:blank');
        }
        else {
            chromeArguments.push('--no-startup-window');
        }
        return chromeArguments;
    }
}
exports.Chromium = Chromium;
function wrapTransportWithWebSocket(transport, logger, port) {
    const server = new ws.Server({ port });
    const guid = helper_1.helper.guid();
    const awaitingBrowserTarget = new Map();
    const sessionToSocket = new Map();
    const socketToBrowserSession = new Map();
    const browserSessions = new Set();
    let lastSequenceNumber = 1;
    transport.onmessage = message => {
        if (typeof message.id === 'number' && awaitingBrowserTarget.has(message.id)) {
            const freshSocket = awaitingBrowserTarget.get(message.id);
            awaitingBrowserTarget.delete(message.id);
            const sessionId = message.result.sessionId;
            if (freshSocket.readyState !== ws.CLOSED && freshSocket.readyState !== ws.CLOSING) {
                sessionToSocket.set(sessionId, freshSocket);
                const { queue } = socketToBrowserSession.get(freshSocket);
                for (const item of queue) {
                    item.sessionId = sessionId;
                    transport.send(item);
                }
                socketToBrowserSession.set(freshSocket, { sessionId });
                browserSessions.add(sessionId);
            }
            else {
                transport.send({
                    id: ++lastSequenceNumber,
                    method: 'Target.detachFromTarget',
                    params: { sessionId }
                });
                socketToBrowserSession.delete(freshSocket);
            }
            return;
        }
        // At this point everything we care about has sessionId.
        if (!message.sessionId)
            return;
        const socket = sessionToSocket.get(message.sessionId);
        if (socket && socket.readyState !== ws.CLOSING) {
            if (message.method === 'Target.attachedToTarget')
                sessionToSocket.set(message.params.sessionId, socket);
            if (message.method === 'Target.detachedFromTarget')
                sessionToSocket.delete(message.params.sessionId);
            // Strip session ids from the browser sessions.
            if (browserSessions.has(message.sessionId))
                delete message.sessionId;
            socket.send(JSON.stringify(message));
        }
    };
    transport.onclose = () => {
        for (const socket of socketToBrowserSession.keys()) {
            socket.removeListener('close', socket.__closeListener);
            socket.close(undefined, 'Browser disconnected');
        }
        server.close();
        transport.onmessage = undefined;
        transport.onclose = undefined;
    };
    server.on('connection', (socket, req) => {
        if (req.url !== '/' + guid) {
            socket.close();
            return;
        }
        socketToBrowserSession.set(socket, { queue: [] });
        transport.send({
            id: ++lastSequenceNumber,
            method: 'Target.attachToBrowserTarget',
            params: {}
        });
        awaitingBrowserTarget.set(lastSequenceNumber, socket);
        socket.on('message', (message) => {
            const parsedMessage = JSON.parse(Buffer.from(message).toString());
            // If message has sessionId, pass through.
            if (parsedMessage.sessionId) {
                transport.send(parsedMessage);
                return;
            }
            // If message has no sessionId, look it up.
            const session = socketToBrowserSession.get(socket);
            if (session.sessionId) {
                // We have it, use it.
                parsedMessage.sessionId = session.sessionId;
                transport.send(parsedMessage);
                return;
            }
            // Pending session id, queue the message.
            session.queue.push(parsedMessage);
        });
        socket.on('error', logger_1.logError(logger));
        socket.on('close', socket.__closeListener = () => {
            const session = socketToBrowserSession.get(socket);
            if (!session || !session.sessionId)
                return;
            sessionToSocket.delete(session.sessionId);
            browserSessions.delete(session.sessionId);
            socketToBrowserSession.delete(socket);
            transport.send({
                id: ++lastSequenceNumber,
                method: 'Target.detachFromTarget',
                params: { sessionId: session.sessionId }
            });
        });
    });
    const address = server.address();
    const wsEndpoint = typeof address === 'string' ? `${address}/${guid}` : `ws://127.0.0.1:${address.port}/${guid}`;
    return new browserServer_1.WebSocketWrapper(wsEndpoint, [awaitingBrowserTarget, sessionToSocket, socketToBrowserSession, browserSessions]);
}
const mkdtempAsync = util.promisify(fs.mkdtemp);
const CHROMIUM_PROFILE_PATH = path.join(os.tmpdir(), 'playwright_dev_profile-');
const DEFAULT_ARGS = [
    '--disable-background-networking',
    '--enable-features=NetworkService,NetworkServiceInProcess',
    '--disable-background-timer-throttling',
    '--disable-backgrounding-occluded-windows',
    '--disable-breakpad',
    '--disable-client-side-phishing-detection',
    '--disable-component-extensions-with-background-pages',
    '--disable-default-apps',
    '--disable-dev-shm-usage',
    '--disable-extensions',
    // BlinkGenPropertyTrees disabled due to crbug.com/937609
    '--disable-features=TranslateUI,BlinkGenPropertyTrees',
    '--disable-hang-monitor',
    '--disable-ipc-flooding-protection',
    '--disable-popup-blocking',
    '--disable-prompt-on-repost',
    '--disable-renderer-backgrounding',
    '--disable-sync',
    '--force-color-profile=srgb',
    '--metrics-recording-only',
    '--no-first-run',
    '--enable-automation',
    '--password-store=basic',
    '--use-mock-keychain',
];
//# sourceMappingURL=chromium.js.map