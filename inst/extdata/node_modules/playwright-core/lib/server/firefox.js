"use strict";
/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const os = require("os");
const path = require("path");
const util = require("util");
const ws = require("ws");
const errors_1 = require("../errors");
const events_1 = require("../events");
const ffBrowser_1 = require("../firefox/ffBrowser");
const ffConnection_1 = require("../firefox/ffConnection");
const helper_1 = require("../helper");
const browserServer_1 = require("./browserServer");
const browserType_1 = require("./browserType");
const processLauncher_1 = require("./processLauncher");
const transport_1 = require("../transport");
const logger_1 = require("../logger");
const mkdtempAsync = util.promisify(fs.mkdtemp);
class Firefox extends browserType_1.AbstractBrowserType {
    constructor(packagePath, browser) {
        super(packagePath, browser);
    }
    async launch(options = {}) {
        helper_1.assert(!options.userDataDir, 'userDataDir option is not supported in `browserType.launch`. Use `browserType.launchPersistentContext` instead');
        const { browserServer, downloadsPath, logger } = await this._launchServer(options, 'local');
        const browser = await transport_1.WebSocketTransport.connect(browserServer.wsEndpoint(), transport => {
            return ffBrowser_1.FFBrowser.connect(transport, logger, false, options.slowMo);
        });
        browser._ownedServer = browserServer;
        browser._downloadsPath = downloadsPath;
        return browser;
    }
    async launchServer(options = {}) {
        return (await this._launchServer(options, 'server')).browserServer;
    }
    async launchPersistentContext(userDataDir, options = {}) {
        const { timeout = 30000, slowMo = 0, } = options;
        const { browserServer, downloadsPath, logger } = await this._launchServer(options, 'persistent', userDataDir);
        const browser = await transport_1.WebSocketTransport.connect(browserServer.wsEndpoint(), transport => {
            return ffBrowser_1.FFBrowser.connect(transport, logger, true, slowMo);
        });
        browser._ownedServer = browserServer;
        browser._downloadsPath = downloadsPath;
        await helper_1.helper.waitWithTimeout(browser._firstPagePromise, 'first page', timeout);
        const browserContext = browser._defaultContext;
        return browserContext;
    }
    async _launchServer(options, launchType, userDataDir) {
        const { ignoreDefaultArgs = false, args = [], executablePath = null, env = process.env, handleSIGHUP = true, handleSIGINT = true, handleSIGTERM = true, timeout = 30000, port = 0, } = options;
        helper_1.assert(!port || launchType === 'server', 'Cannot specify a port without launching as a server.');
        const logger = new logger_1.RootLogger(options.logger);
        const firefoxArguments = [];
        let temporaryProfileDir = null;
        if (!userDataDir) {
            userDataDir = await mkdtempAsync(path.join(os.tmpdir(), 'playwright_dev_firefox_profile-'));
            temporaryProfileDir = userDataDir;
        }
        if (!ignoreDefaultArgs)
            firefoxArguments.push(...this._defaultArgs(options, launchType, userDataDir, 0));
        else if (Array.isArray(ignoreDefaultArgs))
            firefoxArguments.push(...this._defaultArgs(options, launchType, userDataDir, 0).filter(arg => !ignoreDefaultArgs.includes(arg)));
        else
            firefoxArguments.push(...args);
        const firefoxExecutable = executablePath || this.executablePath();
        if (!firefoxExecutable)
            throw new Error(`No executable path is specified. Pass "executablePath" option directly.`);
        const { launchedProcess, gracefullyClose, downloadsPath } = await processLauncher_1.launchProcess({
            executablePath: firefoxExecutable,
            args: firefoxArguments,
            env: os.platform() === 'linux' ? {
                ...env,
                // On linux Juggler ships the libstdc++ it was linked against.
                LD_LIBRARY_PATH: `${path.dirname(firefoxExecutable)}:${process.env.LD_LIBRARY_PATH}`,
            } : env,
            handleSIGINT,
            handleSIGTERM,
            handleSIGHUP,
            logger,
            pipe: false,
            tempDir: temporaryProfileDir || undefined,
            attemptToGracefullyClose: async () => {
                helper_1.assert(browserServer);
                // We try to gracefully close to prevent crash reporting and core dumps.
                const transport = await transport_1.WebSocketTransport.connect(browserWSEndpoint, async (transport) => transport);
                const message = { method: 'Browser.close', params: {}, id: ffConnection_1.kBrowserCloseMessageId };
                await transport.send(message);
            },
            onkill: (exitCode, signal) => {
                if (browserServer)
                    browserServer.emit(events_1.Events.BrowserServer.Close, exitCode, signal);
            },
        });
        const timeoutError = new errors_1.TimeoutError(`Timed out after ${timeout} ms while trying to connect to Firefox!`);
        const match = await processLauncher_1.waitForLine(launchedProcess, launchedProcess.stdout, /^Juggler listening on (ws:\/\/.*)$/, timeout, timeoutError);
        const innerEndpoint = match[1];
        let browserServer = undefined;
        let browserWSEndpoint = undefined;
        const webSocketWrapper = launchType === 'server' ? (await transport_1.WebSocketTransport.connect(innerEndpoint, t => wrapTransportWithWebSocket(t, logger, port))) : new browserServer_1.WebSocketWrapper(innerEndpoint, []);
        browserWSEndpoint = webSocketWrapper.wsEndpoint;
        browserServer = new browserServer_1.BrowserServer(launchedProcess, gracefullyClose, webSocketWrapper);
        return { browserServer, downloadsPath, logger };
    }
    async connect(options) {
        const logger = new logger_1.RootLogger(options.logger);
        return await transport_1.WebSocketTransport.connect(options.wsEndpoint, transport => {
            return ffBrowser_1.FFBrowser.connect(transport, logger, false, options.slowMo);
        });
    }
    _defaultArgs(options = {}, launchType, userDataDir, port) {
        const { devtools = false, headless = !devtools, args = [], } = options;
        if (devtools)
            console.warn('devtools parameter is not supported as a launch argument in Firefox. You can launch the devtools window manually.');
        const userDataDirArg = args.find(arg => arg.startsWith('-profile') || arg.startsWith('--profile'));
        if (userDataDirArg)
            throw new Error('Pass userDataDir parameter instead of specifying -profile argument');
        if (args.find(arg => arg.startsWith('-juggler')))
            throw new Error('Use the port parameter instead of -juggler argument');
        if (launchType !== 'persistent' && args.find(arg => !arg.startsWith('-')))
            throw new Error('Arguments can not specify page to be opened');
        const firefoxArguments = ['-no-remote'];
        if (headless) {
            firefoxArguments.push('-headless');
        }
        else {
            firefoxArguments.push('-wait-for-browser');
            firefoxArguments.push('-foreground');
        }
        firefoxArguments.push(`-profile`, userDataDir);
        firefoxArguments.push('-juggler', String(port));
        firefoxArguments.push(...args);
        if (launchType === 'persistent') {
            if (args.every(arg => arg.startsWith('-')))
                firefoxArguments.push('about:blank');
        }
        else {
            firefoxArguments.push('-silent');
        }
        return firefoxArguments;
    }
}
exports.Firefox = Firefox;
function wrapTransportWithWebSocket(transport, logger, port) {
    const server = new ws.Server({ port });
    const guid = helper_1.helper.guid();
    const idMixer = new transport_1.SequenceNumberMixer();
    const pendingBrowserContextCreations = new Set();
    const pendingBrowserContextDeletions = new Map();
    const browserContextIds = new Map();
    const sessionToSocket = new Map();
    const sockets = new Set();
    transport.onmessage = message => {
        if (typeof message.id === 'number') {
            // Process command response.
            const seqNum = message.id;
            const value = idMixer.take(seqNum);
            if (!value)
                return;
            const { id, socket } = value;
            if (socket.readyState === ws.CLOSING) {
                if (pendingBrowserContextCreations.has(id)) {
                    transport.send({
                        id: ++transport_1.SequenceNumberMixer._lastSequenceNumber,
                        method: 'Browser.removeBrowserContext',
                        params: { browserContextId: message.result.browserContextId }
                    });
                }
                return;
            }
            if (pendingBrowserContextCreations.has(seqNum)) {
                // Browser.createBrowserContext response -> establish context attribution.
                browserContextIds.set(message.result.browserContextId, socket);
                pendingBrowserContextCreations.delete(seqNum);
            }
            const deletedContextId = pendingBrowserContextDeletions.get(seqNum);
            if (deletedContextId) {
                // Browser.removeBrowserContext response -> remove context attribution.
                browserContextIds.delete(deletedContextId);
                pendingBrowserContextDeletions.delete(seqNum);
            }
            message.id = id;
            socket.send(JSON.stringify(message));
            return;
        }
        // Process notification response.
        const { method, params, sessionId } = message;
        if (sessionId) {
            const socket = sessionToSocket.get(sessionId);
            if (!socket || socket.readyState === ws.CLOSING) {
                // Drop unattributed messages on the floor.
                return;
            }
            socket.send(JSON.stringify(message));
            return;
        }
        if (method === 'Browser.attachedToTarget') {
            const socket = browserContextIds.get(params.targetInfo.browserContextId);
            if (!socket || socket.readyState === ws.CLOSING) {
                // Drop unattributed messages on the floor.
                return;
            }
            sessionToSocket.set(params.sessionId, socket);
            socket.send(JSON.stringify(message));
            return;
        }
        if (method === 'Browser.detachedFromTarget') {
            const socket = sessionToSocket.get(params.sessionId);
            sessionToSocket.delete(params.sessionId);
            if (socket && socket.readyState !== ws.CLOSING)
                socket.send(JSON.stringify(message));
            return;
        }
    };
    transport.onclose = () => {
        for (const socket of sockets) {
            socket.removeListener('close', socket.__closeListener);
            socket.close(undefined, 'Browser disconnected');
        }
        server.close();
        transport.onmessage = undefined;
        transport.onclose = undefined;
    };
    server.on('connection', (socket, req) => {
        if (req.url !== '/' + guid) {
            socket.close();
            return;
        }
        sockets.add(socket);
        socket.on('message', (message) => {
            const parsedMessage = JSON.parse(Buffer.from(message).toString());
            const { id, method, params } = parsedMessage;
            const seqNum = idMixer.generate({ id, socket });
            transport.send({ ...parsedMessage, id: seqNum });
            if (method === 'Browser.createBrowserContext')
                pendingBrowserContextCreations.add(seqNum);
            if (method === 'Browser.removeBrowserContext')
                pendingBrowserContextDeletions.set(seqNum, params.browserContextId);
        });
        socket.on('error', logger_1.logError(logger));
        socket.on('close', socket.__closeListener = () => {
            for (const [browserContextId, s] of browserContextIds) {
                if (s === socket) {
                    transport.send({
                        id: ++transport_1.SequenceNumberMixer._lastSequenceNumber,
                        method: 'Browser.removeBrowserContext',
                        params: { browserContextId }
                    });
                    browserContextIds.delete(browserContextId);
                }
            }
            sockets.delete(socket);
        });
    });
    const address = server.address();
    const wsEndpoint = typeof address === 'string' ? `${address}/${guid}` : `ws://127.0.0.1:${address.port}/${guid}`;
    return new browserServer_1.WebSocketWrapper(wsEndpoint, [pendingBrowserContextCreations, pendingBrowserContextDeletions, browserContextIds, sessionToSocket, sockets]);
}
//# sourceMappingURL=firefox.js.map