"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const download_1 = require("./download");
const events_2 = require("./events");
class BrowserBase extends events_1.EventEmitter {
    constructor(logger) {
        super();
        this._downloadsPath = '';
        this._downloads = new Map();
        this._ownedServer = null;
        this._logger = logger;
    }
    async newPage(options) {
        const context = await this.newContext(options);
        const page = await context.newPage();
        page._ownedContext = context;
        return page;
    }
    _downloadCreated(page, uuid, url) {
        const download = new download_1.Download(page, this._downloadsPath, uuid, url);
        this._downloads.set(uuid, download);
    }
    _downloadFinished(uuid, error) {
        const download = this._downloads.get(uuid);
        if (!download)
            return;
        download._reportFinished(error);
        this._downloads.delete(uuid);
    }
    async close() {
        if (this._ownedServer) {
            await this._ownedServer.close();
        }
        else {
            await Promise.all(this.contexts().map(context => context.close()));
            this._disconnect();
        }
        if (this.isConnected())
            await new Promise(x => this.once(events_2.Events.Browser.Disconnected, x));
    }
    _isLogEnabled(log) {
        return this._logger._isLogEnabled(log);
    }
    _log(log, message, ...args) {
        return this._logger._log(log, message, ...args);
    }
}
exports.BrowserBase = BrowserBase;
//# sourceMappingURL=browser.js.map