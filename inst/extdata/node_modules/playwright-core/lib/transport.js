"use strict";
/**
 * Copyright 2018 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const WebSocket = require("ws");
const helper_1 = require("./helper");
class SlowMoTransport {
    constructor(transport, delay) {
        this._delay = delay;
        this._delegate = transport;
        this._delegate.onmessage = this._onmessage.bind(this);
        this._delegate.onclose = this._onClose.bind(this);
    }
    static wrap(transport, delay) {
        return delay ? new SlowMoTransport(transport, delay) : transport;
    }
    _onmessage(message) {
        if (this.onmessage)
            this.onmessage(message);
    }
    _onClose() {
        if (this.onclose)
            this.onclose();
        this._delegate.onmessage = undefined;
        this._delegate.onclose = undefined;
    }
    send(s) {
        setTimeout(() => {
            if (this._delegate.onmessage)
                this._delegate.send(s);
        }, this._delay);
    }
    close() {
        this._delegate.close();
    }
}
exports.SlowMoTransport = SlowMoTransport;
class DeferWriteTransport {
    constructor(transport) {
        this._delegate = transport;
        let callback;
        this._readPromise = new Promise(f => callback = f);
        this._delegate.onmessage = (s) => {
            callback();
            if (this.onmessage)
                this.onmessage(s);
        };
        this._delegate.onclose = () => {
            if (this.onclose)
                this.onclose();
        };
    }
    async send(s) {
        await this._readPromise;
        this._delegate.send(s);
    }
    close() {
        this._delegate.close();
    }
}
exports.DeferWriteTransport = DeferWriteTransport;
class WebSocketTransport {
    constructor(url) {
        this._ws = new WebSocket(url, [], {
            perMessageDeflate: false,
            maxPayload: 256 * 1024 * 1024,
        });
        // The 'ws' module in node sometimes sends us multiple messages in a single task.
        // In Web, all IO callbacks (e.g. WebSocket callbacks)
        // are dispatched into separate tasks, so there's no need
        // to do anything extra.
        const messageWrap = helper_1.helper.makeWaitForNextTask();
        this._ws.addEventListener('message', event => {
            messageWrap(() => {
                if (this.onmessage)
                    this.onmessage.call(null, JSON.parse(event.data));
            });
        });
        this._ws.addEventListener('close', event => {
            if (this.onclose)
                this.onclose.call(null);
        });
        // Silently ignore all errors - we don't know what to do with them.
        this._ws.addEventListener('error', () => { });
    }
    // 'onmessage' handler must be installed synchronously when 'onopen' callback is invoked to
    // avoid missing incoming messages.
    static connect(url, onopen) {
        const transport = new WebSocketTransport(url);
        return new Promise((fulfill, reject) => {
            transport._ws.addEventListener('open', async () => fulfill(await onopen(transport)));
            transport._ws.addEventListener('error', event => reject(new Error('WebSocket error: ' + event.message)));
        });
    }
    send(message) {
        this._ws.send(JSON.stringify(message));
    }
    close() {
        this._ws.close();
    }
}
exports.WebSocketTransport = WebSocketTransport;
class SequenceNumberMixer {
    constructor() {
        this._values = new Map();
    }
    generate(value) {
        const sequenceNumber = ++SequenceNumberMixer._lastSequenceNumber;
        this._values.set(sequenceNumber, value);
        return sequenceNumber;
    }
    take(sequenceNumber) {
        const value = this._values.get(sequenceNumber);
        this._values.delete(sequenceNumber);
        return value;
    }
}
exports.SequenceNumberMixer = SequenceNumberMixer;
SequenceNumberMixer._lastSequenceNumber = 1;
class InterceptingTransport {
    constructor(transport, interceptor) {
        this._delegate = transport;
        this._interceptor = interceptor;
        this._delegate.onmessage = this._onmessage.bind(this);
        this._delegate.onclose = this._onClose.bind(this);
    }
    _onmessage(message) {
        if (this.onmessage)
            this.onmessage(message);
    }
    _onClose() {
        if (this.onclose)
            this.onclose();
        this._delegate.onmessage = undefined;
        this._delegate.onclose = undefined;
    }
    send(s) {
        this._delegate.send(this._interceptor(s));
    }
    close() {
        this._delegate.close();
    }
}
exports.InterceptingTransport = InterceptingTransport;
exports.protocolLog = {
    name: 'protocol',
    severity: 'verbose',
    color: 'green'
};
//# sourceMappingURL=transport.js.map